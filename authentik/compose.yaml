version: '3.4'

services:
  postgresql:
    image: postgres:12-alpine
    restart: unless-stopped
    networks:
      - ${NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
    env_file:
      - .env

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - ${NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  server:
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    restart: unless-stopped
    networks:
      - ${NETWORK}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ${MEDIA}:/media
      - ${TEMPLATES}:/templates
      - geoip:/geoip
    ports:
      - "0.0.0.0:${AUTHENTIK_PORT_HTTP}:9000"
      - "0.0.0.0:${AUTHENTIK_PORT_HTTPS}:9443"
    env_file:
      - .env

  worker:
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    restart: unless-stopped
    networks:
      - ${NETWORK}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: ${WORKER_USER}
    volumes:
      - ${MEDIA}:/media
      - ${WORKER_CERTS}:/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ${TEMPLATES}:/templates
      - geoip:/geoip
    env_file:
      - .env

  geoipupdate:
    image: "maxmindinc/geoipupdate:latest"
    volumes:
      - "geoip:/usr/share/GeoIP"
    environment:
      GEOIPUPDATE_EDITION_IDS: "GeoLite2-City"
      GEOIPUPDATE_FREQUENCY: "8"
    env_file:
      - .env

volumes:
  database:
    driver: local
  geoip:
    driver: local

networks:
  ${NETWORK}:
    external: true